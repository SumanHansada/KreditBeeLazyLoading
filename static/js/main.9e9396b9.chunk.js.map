{"version":3,"sources":["components/Photo.js","components/Album.js","App.js","reportWebVitals.js","index.js"],"names":["Photo","React","memo","props","albumId","useState","isLoading","setIsLoading","photos","setPhotos","useEffect","fetch","method","then","res","json","response","catch","error","console","log","className","length","map","photo","index","offsetHorizontal","throttle","debounce","Card","Body","Img","alt","title","variant","src","thumbnailUrl","Text","id","Album","albums","setAlbums","album","offsetVertical","Header","Title","userId","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8PAuDeA,EAnDDC,IAAMC,MAAK,SAACC,GACxB,IAAQC,EAAYD,EAAZC,QACR,EAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KAeA,OAbAC,qBAAU,WACRH,GAAa,GACbI,MAAM,sDAAwDP,EAAS,CACrEQ,OAAQ,QAEPC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLP,EAAUO,GACVT,GAAa,MAEdU,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,QAC/B,CAACd,IAGF,sBAAKiB,UAAU,wBAAf,UACGf,GAAa,+CACbE,EAAOc,OAAS,GACfd,EAAOe,KAAI,SAACC,EAAOC,GAAR,OACT,cAAC,IAAD,CAEEC,iBAAkB,GAClBC,SAAU,IACVC,UAAU,EAJZ,SAME,cAACC,EAAA,EAAD,CAAMR,UAAU,iBAAhB,SACE,eAACQ,EAAA,EAAKC,KAAN,WACE,cAAC,IAAD,CAAUJ,iBAAkB,GAAIC,SAAU,IAAKC,UAAU,EAAzD,SACE,cAACC,EAAA,EAAKE,IAAN,CACEC,IAAKR,EAAMS,MACXC,QAAQ,MACRC,IAAKX,EAAMY,iBAGf,eAACP,EAAA,EAAKQ,KAAN,CAAWhB,UAAU,YAArB,UACGG,EAAMS,MACP,uBAFF,OAGOT,EAAMc,YAjBZb,YCsBFc,MA7Cf,WACE,MAAkClC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA4BF,mBAAS,IAArC,mBAAOmC,EAAP,KAAeC,EAAf,KAeA,OAbA/B,qBAAU,WACRH,GAAa,GACbI,MAAM,6CAA8C,CAClDC,OAAQ,QAEPC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLyB,EAAUzB,GACVT,GAAa,MAEdU,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,QAC/B,IAGD,gCACGZ,GAAa,+CACbkC,EAAOlB,OAAS,GACfkB,EAAOjB,KAAI,SAACmB,EAAOjB,GAAR,OACT,cAAC,IAAD,CAEEkB,eAAgB,IAChBhB,SAAU,IACVC,UAAU,EAJZ,SAME,eAACC,EAAA,EAAD,WACE,eAACA,EAAA,EAAKe,OAAN,WACE,cAACf,EAAA,EAAKgB,MAAN,UAAaH,EAAMT,QACnB,eAACJ,EAAA,EAAKQ,KAAN,kBACOK,EAAMJ,GADb,aAC2BI,EAAMI,aAGnC,cAAC,IAAD,CAAUnB,SAAU,IAAKC,UAAU,EAAMF,iBAAkB,GAA3D,SACE,cAAC,EAAD,CAAOtB,QAASsC,EAAMJ,WAbrBb,UChBFsB,MARf,WACE,OACE,qBAAK1B,UAAU,MAAf,SACE,cAAC,EAAD,OCKS2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrC,MAAK,YAAkD,IAA/CsC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.9e9396b9.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport LazyLoad from \"react-lazy-load\";\nimport { Card } from \"react-bootstrap\";\n\nconst Photo = React.memo((props) => {\n  const { albumId } = props;\n  const [isLoading, setIsLoading] = useState(false);\n  const [photos, setPhotos] = useState([]);\n\n  useEffect(() => {\n    setIsLoading(true);\n    fetch(\"http://jsonplaceholder.typicode.com/photos?albumId=\" + albumId, {\n      method: \"GET\",\n    })\n      .then((res) => res.json())\n      .then((response) => {\n        setPhotos(response);\n        setIsLoading(false);\n      })\n      .catch((error) => console.log(error));\n  }, [albumId]);\n\n  return (\n    <div className=\"horizontal-scroll-div\">\n      {isLoading && <p>Loading Photos</p>}\n      {photos.length > 0 &&\n        photos.map((photo, index) => (\n          <LazyLoad\n            key={index}\n            offsetHorizontal={50}\n            throttle={500}\n            debounce={true}\n          >\n            <Card className=\"card-container\">\n              <Card.Body>\n                <LazyLoad offsetHorizontal={50} throttle={500} debounce={true}>\n                  <Card.Img\n                    alt={photo.title}\n                    variant=\"top\"\n                    src={photo.thumbnailUrl}\n                  />\n                </LazyLoad>\n                <Card.Text className=\"wrap-text\">\n                  {photo.title}\n                  <br />\n                  id: {photo.id}\n                </Card.Text>\n              </Card.Body>\n            </Card>\n          </LazyLoad>\n        ))}\n    </div>\n  );\n});\n\nexport default Photo;\n","import React, { useEffect, useState } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport Photo from \"./Photo\";\nimport LazyLoad from \"react-lazy-load\";\n\nfunction Album() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [albums, setAlbums] = useState([]);\n\n  useEffect(() => {\n    setIsLoading(true);\n    fetch(\"http://jsonplaceholder.typicode.com/albums\", {\n      method: \"GET\",\n    })\n      .then((res) => res.json())\n      .then((response) => {\n        setAlbums(response);\n        setIsLoading(false);\n      })\n      .catch((error) => console.log(error));\n  }, []);\n\n  return (\n    <div>\n      {isLoading && <p>Loading Albums</p>}\n      {albums.length > 0 &&\n        albums.map((album, index) => (\n          <LazyLoad\n            key={index}\n            offsetVertical={300}\n            throttle={500}\n            debounce={true}\n          >\n            <Card>\n              <Card.Header>\n                <Card.Title>{album.title}</Card.Title>\n                <Card.Text>\n                  id: {album.id}, userid: {album.userId}\n                </Card.Text>\n              </Card.Header>\n              <LazyLoad throttle={500} debounce={true} offsetHorizontal={50}>\n                <Photo albumId={album.id}></Photo>\n              </LazyLoad>\n            </Card>\n          </LazyLoad>\n        ))}\n    </div>\n  );\n}\n\nexport default Album;\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport Album from \"./components/Album\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Album />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}